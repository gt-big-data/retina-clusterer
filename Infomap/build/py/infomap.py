# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_infomap', [dirname(__file__)])
        except ImportError:
            import _infomap
            return _infomap
        if fp is not None:
            try:
                _mod = imp.load_module('_infomap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _infomap = swig_import_helper()
    del swig_import_helper
else:
    import _infomap
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def init(*args):
  return _infomap.init(*args)
init = _infomap.init

def run(*args):
  return _infomap.run(*args)
run = _infomap.run
class ElapsedTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElapsedTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElapsedTime, name)
    __repr__ = _swig_repr
    SECONDS_IN_A_MINUTE = _infomap.ElapsedTime_SECONDS_IN_A_MINUTE
    SECONDS_IN_AN_HOUR = _infomap.ElapsedTime_SECONDS_IN_AN_HOUR
    SECONDS_IN_A_DAY = _infomap.ElapsedTime_SECONDS_IN_A_DAY
    def __init__(self, *args): 
        this = _infomap.new_ElapsedTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _infomap.delete_ElapsedTime
    __del__ = lambda self : None;
    def getSeconds(self): return _infomap.ElapsedTime_getSeconds(self)
    def getMinutes(self): return _infomap.ElapsedTime_getMinutes(self)
    def getHours(self): return _infomap.ElapsedTime_getHours(self)
    def getDays(self): return _infomap.ElapsedTime_getDays(self)
ElapsedTime_swigregister = _infomap.ElapsedTime_swigregister
ElapsedTime_swigregister(ElapsedTime)

class Date(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _infomap.new_Date(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _infomap.delete_Date
    __del__ = lambda self : None;
    def __sub__(self, *args): return _infomap.Date___sub__(self, *args)
Date_swigregister = _infomap.Date_swigregister
Date_swigregister(Date)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _infomap.new_Config(*args)
        try: self.this.append(this)
        except: self.this = this
    def setOptimizationLevel(self, *args): return _infomap.Config_setOptimizationLevel(self, *args)
    def adaptDefaults(self): return _infomap.Config_adaptDefaults(self)
    def isUndirected(self): return _infomap.Config_isUndirected(self)
    def isUndirectedFlow(self): return _infomap.Config_isUndirectedFlow(self)
    def printAsUndirected(self): return _infomap.Config_printAsUndirected(self)
    def parseAsUndirected(self): return _infomap.Config_parseAsUndirected(self)
    def useTeleportation(self): return _infomap.Config_useTeleportation(self)
    def isMemoryInput(self): return _infomap.Config_isMemoryInput(self)
    def isMemoryNetwork(self): return _infomap.Config_isMemoryNetwork(self)
    def isSimulatedMemoryNetwork(self): return _infomap.Config_isSimulatedMemoryNetwork(self)
    def isMultiplexNetwork(self): return _infomap.Config_isMultiplexNetwork(self)
    def haveOutput(self): return _infomap.Config_haveOutput(self)
    def haveModularResultOutput(self): return _infomap.Config_haveModularResultOutput(self)
    def elapsedTime(self): return _infomap.Config_elapsedTime(self)
    __swig_setmethods__["parsedArgs"] = _infomap.Config_parsedArgs_set
    __swig_getmethods__["parsedArgs"] = _infomap.Config_parsedArgs_get
    if _newclass:parsedArgs = _swig_property(_infomap.Config_parsedArgs_get, _infomap.Config_parsedArgs_set)
    __swig_setmethods__["networkFile"] = _infomap.Config_networkFile_set
    __swig_getmethods__["networkFile"] = _infomap.Config_networkFile_get
    if _newclass:networkFile = _swig_property(_infomap.Config_networkFile_get, _infomap.Config_networkFile_set)
    __swig_setmethods__["additionalInput"] = _infomap.Config_additionalInput_set
    __swig_getmethods__["additionalInput"] = _infomap.Config_additionalInput_get
    if _newclass:additionalInput = _swig_property(_infomap.Config_additionalInput_get, _infomap.Config_additionalInput_set)
    __swig_setmethods__["inputFormat"] = _infomap.Config_inputFormat_set
    __swig_getmethods__["inputFormat"] = _infomap.Config_inputFormat_get
    if _newclass:inputFormat = _swig_property(_infomap.Config_inputFormat_get, _infomap.Config_inputFormat_set)
    __swig_setmethods__["withMemory"] = _infomap.Config_withMemory_set
    __swig_getmethods__["withMemory"] = _infomap.Config_withMemory_get
    if _newclass:withMemory = _swig_property(_infomap.Config_withMemory_get, _infomap.Config_withMemory_set)
    __swig_setmethods__["hardPartitions"] = _infomap.Config_hardPartitions_set
    __swig_getmethods__["hardPartitions"] = _infomap.Config_hardPartitions_get
    if _newclass:hardPartitions = _swig_property(_infomap.Config_hardPartitions_get, _infomap.Config_hardPartitions_set)
    __swig_setmethods__["nonBacktracking"] = _infomap.Config_nonBacktracking_set
    __swig_getmethods__["nonBacktracking"] = _infomap.Config_nonBacktracking_get
    if _newclass:nonBacktracking = _swig_property(_infomap.Config_nonBacktracking_get, _infomap.Config_nonBacktracking_set)
    __swig_setmethods__["parseWithoutIOStreams"] = _infomap.Config_parseWithoutIOStreams_set
    __swig_getmethods__["parseWithoutIOStreams"] = _infomap.Config_parseWithoutIOStreams_get
    if _newclass:parseWithoutIOStreams = _swig_property(_infomap.Config_parseWithoutIOStreams_get, _infomap.Config_parseWithoutIOStreams_set)
    __swig_setmethods__["zeroBasedNodeNumbers"] = _infomap.Config_zeroBasedNodeNumbers_set
    __swig_getmethods__["zeroBasedNodeNumbers"] = _infomap.Config_zeroBasedNodeNumbers_get
    if _newclass:zeroBasedNodeNumbers = _swig_property(_infomap.Config_zeroBasedNodeNumbers_get, _infomap.Config_zeroBasedNodeNumbers_set)
    __swig_setmethods__["includeSelfLinks"] = _infomap.Config_includeSelfLinks_set
    __swig_getmethods__["includeSelfLinks"] = _infomap.Config_includeSelfLinks_get
    if _newclass:includeSelfLinks = _swig_property(_infomap.Config_includeSelfLinks_get, _infomap.Config_includeSelfLinks_set)
    __swig_setmethods__["ignoreEdgeWeights"] = _infomap.Config_ignoreEdgeWeights_set
    __swig_getmethods__["ignoreEdgeWeights"] = _infomap.Config_ignoreEdgeWeights_get
    if _newclass:ignoreEdgeWeights = _swig_property(_infomap.Config_ignoreEdgeWeights_get, _infomap.Config_ignoreEdgeWeights_set)
    __swig_setmethods__["nodeLimit"] = _infomap.Config_nodeLimit_set
    __swig_getmethods__["nodeLimit"] = _infomap.Config_nodeLimit_get
    if _newclass:nodeLimit = _swig_property(_infomap.Config_nodeLimit_get, _infomap.Config_nodeLimit_set)
    __swig_setmethods__["clusterDataFile"] = _infomap.Config_clusterDataFile_set
    __swig_getmethods__["clusterDataFile"] = _infomap.Config_clusterDataFile_get
    if _newclass:clusterDataFile = _swig_property(_infomap.Config_clusterDataFile_get, _infomap.Config_clusterDataFile_set)
    __swig_setmethods__["noInfomap"] = _infomap.Config_noInfomap_set
    __swig_getmethods__["noInfomap"] = _infomap.Config_noInfomap_get
    if _newclass:noInfomap = _swig_property(_infomap.Config_noInfomap_get, _infomap.Config_noInfomap_set)
    __swig_setmethods__["twoLevel"] = _infomap.Config_twoLevel_set
    __swig_getmethods__["twoLevel"] = _infomap.Config_twoLevel_get
    if _newclass:twoLevel = _swig_property(_infomap.Config_twoLevel_get, _infomap.Config_twoLevel_set)
    __swig_setmethods__["directed"] = _infomap.Config_directed_set
    __swig_getmethods__["directed"] = _infomap.Config_directed_get
    if _newclass:directed = _swig_property(_infomap.Config_directed_get, _infomap.Config_directed_set)
    __swig_setmethods__["undirdir"] = _infomap.Config_undirdir_set
    __swig_getmethods__["undirdir"] = _infomap.Config_undirdir_get
    if _newclass:undirdir = _swig_property(_infomap.Config_undirdir_get, _infomap.Config_undirdir_set)
    __swig_setmethods__["outdirdir"] = _infomap.Config_outdirdir_set
    __swig_getmethods__["outdirdir"] = _infomap.Config_outdirdir_get
    if _newclass:outdirdir = _swig_property(_infomap.Config_outdirdir_get, _infomap.Config_outdirdir_set)
    __swig_setmethods__["rawdir"] = _infomap.Config_rawdir_set
    __swig_getmethods__["rawdir"] = _infomap.Config_rawdir_get
    if _newclass:rawdir = _swig_property(_infomap.Config_rawdir_get, _infomap.Config_rawdir_set)
    __swig_setmethods__["recordedTeleportation"] = _infomap.Config_recordedTeleportation_set
    __swig_getmethods__["recordedTeleportation"] = _infomap.Config_recordedTeleportation_get
    if _newclass:recordedTeleportation = _swig_property(_infomap.Config_recordedTeleportation_get, _infomap.Config_recordedTeleportation_set)
    __swig_setmethods__["teleportToNodes"] = _infomap.Config_teleportToNodes_set
    __swig_getmethods__["teleportToNodes"] = _infomap.Config_teleportToNodes_get
    if _newclass:teleportToNodes = _swig_property(_infomap.Config_teleportToNodes_get, _infomap.Config_teleportToNodes_set)
    __swig_setmethods__["teleportationProbability"] = _infomap.Config_teleportationProbability_set
    __swig_getmethods__["teleportationProbability"] = _infomap.Config_teleportationProbability_get
    if _newclass:teleportationProbability = _swig_property(_infomap.Config_teleportationProbability_get, _infomap.Config_teleportationProbability_set)
    __swig_setmethods__["selfTeleportationProbability"] = _infomap.Config_selfTeleportationProbability_set
    __swig_getmethods__["selfTeleportationProbability"] = _infomap.Config_selfTeleportationProbability_get
    if _newclass:selfTeleportationProbability = _swig_property(_infomap.Config_selfTeleportationProbability_get, _infomap.Config_selfTeleportationProbability_set)
    __swig_setmethods__["codeRate"] = _infomap.Config_codeRate_set
    __swig_getmethods__["codeRate"] = _infomap.Config_codeRate_get
    if _newclass:codeRate = _swig_property(_infomap.Config_codeRate_get, _infomap.Config_codeRate_set)
    __swig_setmethods__["preferredNumberOfModules"] = _infomap.Config_preferredNumberOfModules_set
    __swig_getmethods__["preferredNumberOfModules"] = _infomap.Config_preferredNumberOfModules_get
    if _newclass:preferredNumberOfModules = _swig_property(_infomap.Config_preferredNumberOfModules_get, _infomap.Config_preferredNumberOfModules_set)
    __swig_setmethods__["multiplexRelaxRate"] = _infomap.Config_multiplexRelaxRate_set
    __swig_getmethods__["multiplexRelaxRate"] = _infomap.Config_multiplexRelaxRate_get
    if _newclass:multiplexRelaxRate = _swig_property(_infomap.Config_multiplexRelaxRate_get, _infomap.Config_multiplexRelaxRate_set)
    __swig_setmethods__["seedToRandomNumberGenerator"] = _infomap.Config_seedToRandomNumberGenerator_set
    __swig_getmethods__["seedToRandomNumberGenerator"] = _infomap.Config_seedToRandomNumberGenerator_get
    if _newclass:seedToRandomNumberGenerator = _swig_property(_infomap.Config_seedToRandomNumberGenerator_get, _infomap.Config_seedToRandomNumberGenerator_set)
    __swig_setmethods__["numTrials"] = _infomap.Config_numTrials_set
    __swig_getmethods__["numTrials"] = _infomap.Config_numTrials_get
    if _newclass:numTrials = _swig_property(_infomap.Config_numTrials_get, _infomap.Config_numTrials_set)
    __swig_setmethods__["minimumCodelengthImprovement"] = _infomap.Config_minimumCodelengthImprovement_set
    __swig_getmethods__["minimumCodelengthImprovement"] = _infomap.Config_minimumCodelengthImprovement_get
    if _newclass:minimumCodelengthImprovement = _swig_property(_infomap.Config_minimumCodelengthImprovement_get, _infomap.Config_minimumCodelengthImprovement_set)
    __swig_setmethods__["minimumSingleNodeCodelengthImprovement"] = _infomap.Config_minimumSingleNodeCodelengthImprovement_set
    __swig_getmethods__["minimumSingleNodeCodelengthImprovement"] = _infomap.Config_minimumSingleNodeCodelengthImprovement_get
    if _newclass:minimumSingleNodeCodelengthImprovement = _swig_property(_infomap.Config_minimumSingleNodeCodelengthImprovement_get, _infomap.Config_minimumSingleNodeCodelengthImprovement_set)
    __swig_setmethods__["randomizeCoreLoopLimit"] = _infomap.Config_randomizeCoreLoopLimit_set
    __swig_getmethods__["randomizeCoreLoopLimit"] = _infomap.Config_randomizeCoreLoopLimit_get
    if _newclass:randomizeCoreLoopLimit = _swig_property(_infomap.Config_randomizeCoreLoopLimit_get, _infomap.Config_randomizeCoreLoopLimit_set)
    __swig_setmethods__["coreLoopLimit"] = _infomap.Config_coreLoopLimit_set
    __swig_getmethods__["coreLoopLimit"] = _infomap.Config_coreLoopLimit_get
    if _newclass:coreLoopLimit = _swig_property(_infomap.Config_coreLoopLimit_get, _infomap.Config_coreLoopLimit_set)
    __swig_setmethods__["levelAggregationLimit"] = _infomap.Config_levelAggregationLimit_set
    __swig_getmethods__["levelAggregationLimit"] = _infomap.Config_levelAggregationLimit_get
    if _newclass:levelAggregationLimit = _swig_property(_infomap.Config_levelAggregationLimit_get, _infomap.Config_levelAggregationLimit_set)
    __swig_setmethods__["tuneIterationLimit"] = _infomap.Config_tuneIterationLimit_set
    __swig_getmethods__["tuneIterationLimit"] = _infomap.Config_tuneIterationLimit_get
    if _newclass:tuneIterationLimit = _swig_property(_infomap.Config_tuneIterationLimit_get, _infomap.Config_tuneIterationLimit_set)
    __swig_setmethods__["minimumRelativeTuneIterationImprovement"] = _infomap.Config_minimumRelativeTuneIterationImprovement_set
    __swig_getmethods__["minimumRelativeTuneIterationImprovement"] = _infomap.Config_minimumRelativeTuneIterationImprovement_get
    if _newclass:minimumRelativeTuneIterationImprovement = _swig_property(_infomap.Config_minimumRelativeTuneIterationImprovement_get, _infomap.Config_minimumRelativeTuneIterationImprovement_set)
    __swig_setmethods__["fastCoarseTunePartition"] = _infomap.Config_fastCoarseTunePartition_set
    __swig_getmethods__["fastCoarseTunePartition"] = _infomap.Config_fastCoarseTunePartition_get
    if _newclass:fastCoarseTunePartition = _swig_property(_infomap.Config_fastCoarseTunePartition_get, _infomap.Config_fastCoarseTunePartition_set)
    __swig_setmethods__["alternateCoarseTuneLevel"] = _infomap.Config_alternateCoarseTuneLevel_set
    __swig_getmethods__["alternateCoarseTuneLevel"] = _infomap.Config_alternateCoarseTuneLevel_get
    if _newclass:alternateCoarseTuneLevel = _swig_property(_infomap.Config_alternateCoarseTuneLevel_get, _infomap.Config_alternateCoarseTuneLevel_set)
    __swig_setmethods__["coarseTuneLevel"] = _infomap.Config_coarseTuneLevel_set
    __swig_getmethods__["coarseTuneLevel"] = _infomap.Config_coarseTuneLevel_get
    if _newclass:coarseTuneLevel = _swig_property(_infomap.Config_coarseTuneLevel_get, _infomap.Config_coarseTuneLevel_set)
    __swig_setmethods__["fastHierarchicalSolution"] = _infomap.Config_fastHierarchicalSolution_set
    __swig_getmethods__["fastHierarchicalSolution"] = _infomap.Config_fastHierarchicalSolution_get
    if _newclass:fastHierarchicalSolution = _swig_property(_infomap.Config_fastHierarchicalSolution_get, _infomap.Config_fastHierarchicalSolution_set)
    __swig_setmethods__["fastFirstIteration"] = _infomap.Config_fastFirstIteration_set
    __swig_getmethods__["fastFirstIteration"] = _infomap.Config_fastFirstIteration_get
    if _newclass:fastFirstIteration = _swig_property(_infomap.Config_fastFirstIteration_get, _infomap.Config_fastFirstIteration_set)
    __swig_setmethods__["lowMemoryPriority"] = _infomap.Config_lowMemoryPriority_set
    __swig_getmethods__["lowMemoryPriority"] = _infomap.Config_lowMemoryPriority_get
    if _newclass:lowMemoryPriority = _swig_property(_infomap.Config_lowMemoryPriority_get, _infomap.Config_lowMemoryPriority_set)
    __swig_setmethods__["innerParallelization"] = _infomap.Config_innerParallelization_set
    __swig_getmethods__["innerParallelization"] = _infomap.Config_innerParallelization_get
    if _newclass:innerParallelization = _swig_property(_infomap.Config_innerParallelization_get, _infomap.Config_innerParallelization_set)
    __swig_setmethods__["outDirectory"] = _infomap.Config_outDirectory_set
    __swig_getmethods__["outDirectory"] = _infomap.Config_outDirectory_get
    if _newclass:outDirectory = _swig_property(_infomap.Config_outDirectory_get, _infomap.Config_outDirectory_set)
    __swig_setmethods__["originallyUndirected"] = _infomap.Config_originallyUndirected_set
    __swig_getmethods__["originallyUndirected"] = _infomap.Config_originallyUndirected_get
    if _newclass:originallyUndirected = _swig_property(_infomap.Config_originallyUndirected_get, _infomap.Config_originallyUndirected_set)
    __swig_setmethods__["printTree"] = _infomap.Config_printTree_set
    __swig_getmethods__["printTree"] = _infomap.Config_printTree_get
    if _newclass:printTree = _swig_property(_infomap.Config_printTree_get, _infomap.Config_printTree_set)
    __swig_setmethods__["printFlowTree"] = _infomap.Config_printFlowTree_set
    __swig_getmethods__["printFlowTree"] = _infomap.Config_printFlowTree_get
    if _newclass:printFlowTree = _swig_property(_infomap.Config_printFlowTree_get, _infomap.Config_printFlowTree_set)
    __swig_setmethods__["printMap"] = _infomap.Config_printMap_set
    __swig_getmethods__["printMap"] = _infomap.Config_printMap_get
    if _newclass:printMap = _swig_property(_infomap.Config_printMap_get, _infomap.Config_printMap_set)
    __swig_setmethods__["printClu"] = _infomap.Config_printClu_set
    __swig_getmethods__["printClu"] = _infomap.Config_printClu_get
    if _newclass:printClu = _swig_property(_infomap.Config_printClu_get, _infomap.Config_printClu_set)
    __swig_setmethods__["printNodeRanks"] = _infomap.Config_printNodeRanks_set
    __swig_getmethods__["printNodeRanks"] = _infomap.Config_printNodeRanks_get
    if _newclass:printNodeRanks = _swig_property(_infomap.Config_printNodeRanks_get, _infomap.Config_printNodeRanks_set)
    __swig_setmethods__["printFlowNetwork"] = _infomap.Config_printFlowNetwork_set
    __swig_getmethods__["printFlowNetwork"] = _infomap.Config_printFlowNetwork_get
    if _newclass:printFlowNetwork = _swig_property(_infomap.Config_printFlowNetwork_get, _infomap.Config_printFlowNetwork_set)
    __swig_setmethods__["printPajekNetwork"] = _infomap.Config_printPajekNetwork_set
    __swig_getmethods__["printPajekNetwork"] = _infomap.Config_printPajekNetwork_get
    if _newclass:printPajekNetwork = _swig_property(_infomap.Config_printPajekNetwork_get, _infomap.Config_printPajekNetwork_set)
    __swig_setmethods__["printBinaryTree"] = _infomap.Config_printBinaryTree_set
    __swig_getmethods__["printBinaryTree"] = _infomap.Config_printBinaryTree_get
    if _newclass:printBinaryTree = _swig_property(_infomap.Config_printBinaryTree_get, _infomap.Config_printBinaryTree_set)
    __swig_setmethods__["printBinaryFlowTree"] = _infomap.Config_printBinaryFlowTree_set
    __swig_getmethods__["printBinaryFlowTree"] = _infomap.Config_printBinaryFlowTree_get
    if _newclass:printBinaryFlowTree = _swig_property(_infomap.Config_printBinaryFlowTree_get, _infomap.Config_printBinaryFlowTree_set)
    __swig_setmethods__["printExpanded"] = _infomap.Config_printExpanded_set
    __swig_getmethods__["printExpanded"] = _infomap.Config_printExpanded_get
    if _newclass:printExpanded = _swig_property(_infomap.Config_printExpanded_get, _infomap.Config_printExpanded_set)
    __swig_setmethods__["noFileOutput"] = _infomap.Config_noFileOutput_set
    __swig_getmethods__["noFileOutput"] = _infomap.Config_noFileOutput_get
    if _newclass:noFileOutput = _swig_property(_infomap.Config_noFileOutput_get, _infomap.Config_noFileOutput_set)
    __swig_setmethods__["verbosity"] = _infomap.Config_verbosity_set
    __swig_getmethods__["verbosity"] = _infomap.Config_verbosity_get
    if _newclass:verbosity = _swig_property(_infomap.Config_verbosity_get, _infomap.Config_verbosity_set)
    __swig_setmethods__["verboseNumberPrecision"] = _infomap.Config_verboseNumberPrecision_set
    __swig_getmethods__["verboseNumberPrecision"] = _infomap.Config_verboseNumberPrecision_get
    if _newclass:verboseNumberPrecision = _swig_property(_infomap.Config_verboseNumberPrecision_get, _infomap.Config_verboseNumberPrecision_set)
    __swig_setmethods__["silent"] = _infomap.Config_silent_set
    __swig_getmethods__["silent"] = _infomap.Config_silent_get
    if _newclass:silent = _swig_property(_infomap.Config_silent_get, _infomap.Config_silent_set)
    __swig_setmethods__["benchmark"] = _infomap.Config_benchmark_set
    __swig_getmethods__["benchmark"] = _infomap.Config_benchmark_get
    if _newclass:benchmark = _swig_property(_infomap.Config_benchmark_get, _infomap.Config_benchmark_set)
    __swig_setmethods__["startDate"] = _infomap.Config_startDate_set
    __swig_getmethods__["startDate"] = _infomap.Config_startDate_get
    if _newclass:startDate = _swig_property(_infomap.Config_startDate_get, _infomap.Config_startDate_set)
    __swig_setmethods__["version"] = _infomap.Config_version_set
    __swig_getmethods__["version"] = _infomap.Config_version_get
    if _newclass:version = _swig_property(_infomap.Config_version_get, _infomap.Config_version_set)
    __swig_destroy__ = _infomap.delete_Config
    __del__ = lambda self : None;
Config_swigregister = _infomap.Config_swigregister
Config_swigregister(Config)

class Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _infomap.new_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _infomap.delete_Network
    __del__ = lambda self : None;
    def setConfig(self, *args): return _infomap.Network_setConfig(self, *args)
    def readInputData(self, filename=""): return _infomap.Network_readInputData(self, filename)
    def addLink(self, *args): return _infomap.Network_addLink(self, *args)
    def finalizeAndCheckNetwork(self, printSummary=True, desiredNumberOfNodes=0): return _infomap.Network_finalizeAndCheckNetwork(self, printSummary, desiredNumberOfNodes)
    def printParsingResult(self, onlySummary=False): return _infomap.Network_printParsingResult(self, onlySummary)
    def getParsingResultSummary(self): return _infomap.Network_getParsingResultSummary(self)
    def printNetworkAsPajek(self, *args): return _infomap.Network_printNetworkAsPajek(self, *args)
    def numNodes(self): return _infomap.Network_numNodes(self)
    def nodeNames(self): return _infomap.Network_nodeNames(self)
    def nodeWeights(self): return _infomap.Network_nodeWeights(self)
    def sumNodeWeights(self): return _infomap.Network_sumNodeWeights(self)
    def outDegree(self): return _infomap.Network_outDegree(self)
    def sumLinkOutWeight(self): return _infomap.Network_sumLinkOutWeight(self)
    def linkMap(self): return _infomap.Network_linkMap(self)
    def numLinks(self): return _infomap.Network_numLinks(self)
    def totalLinkWeight(self): return _infomap.Network_totalLinkWeight(self)
    def totalSelfLinkWeight(self): return _infomap.Network_totalSelfLinkWeight(self)
    def swapNodeNames(self, *args): return _infomap.Network_swapNodeNames(self, *args)
    def disposeLinks(self): return _infomap.Network_disposeLinks(self)
    def config(self): return _infomap.Network_config(self)
Network_swigregister = _infomap.Network_swigregister
Network_swigregister(Network)

class Triple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _infomap.new_Triple(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _infomap.delete_Triple
    __del__ = lambda self : None;
    def __lt__(self, *args): return _infomap.Triple___lt__(self, *args)
    def __eq__(self, *args): return _infomap.Triple___eq__(self, *args)
    __swig_setmethods__["n1"] = _infomap.Triple_n1_set
    __swig_getmethods__["n1"] = _infomap.Triple_n1_get
    if _newclass:n1 = _swig_property(_infomap.Triple_n1_get, _infomap.Triple_n1_set)
    __swig_setmethods__["n2"] = _infomap.Triple_n2_set
    __swig_getmethods__["n2"] = _infomap.Triple_n2_get
    if _newclass:n2 = _swig_property(_infomap.Triple_n2_get, _infomap.Triple_n2_set)
    __swig_setmethods__["n3"] = _infomap.Triple_n3_set
    __swig_getmethods__["n3"] = _infomap.Triple_n3_get
    if _newclass:n3 = _swig_property(_infomap.Triple_n3_get, _infomap.Triple_n3_set)
Triple_swigregister = _infomap.Triple_swigregister
Triple_swigregister(Triple)

NONE = _infomap.NONE
PARTIAL = _infomap.PARTIAL
FULL = _infomap.FULL
class NodeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeData, name)
    __repr__ = _swig_repr
    def __init__(self, flow=0.0, exitFlow=0.0, name=""): 
        this = _infomap.new_NodeData(flow, exitFlow, name)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["flow"] = _infomap.NodeData_flow_set
    __swig_getmethods__["flow"] = _infomap.NodeData_flow_get
    if _newclass:flow = _swig_property(_infomap.NodeData_flow_get, _infomap.NodeData_flow_set)
    __swig_setmethods__["enterFlow"] = _infomap.NodeData_enterFlow_set
    __swig_getmethods__["enterFlow"] = _infomap.NodeData_enterFlow_get
    if _newclass:enterFlow = _swig_property(_infomap.NodeData_enterFlow_get, _infomap.NodeData_enterFlow_set)
    __swig_setmethods__["exitFlow"] = _infomap.NodeData_exitFlow_set
    __swig_getmethods__["exitFlow"] = _infomap.NodeData_exitFlow_get
    if _newclass:exitFlow = _swig_property(_infomap.NodeData_exitFlow_get, _infomap.NodeData_exitFlow_set)
    __swig_setmethods__["teleportRate"] = _infomap.NodeData_teleportRate_set
    __swig_getmethods__["teleportRate"] = _infomap.NodeData_teleportRate_get
    if _newclass:teleportRate = _swig_property(_infomap.NodeData_teleportRate_get, _infomap.NodeData_teleportRate_set)
    __swig_setmethods__["danglingFlow"] = _infomap.NodeData_danglingFlow_set
    __swig_getmethods__["danglingFlow"] = _infomap.NodeData_danglingFlow_get
    if _newclass:danglingFlow = _swig_property(_infomap.NodeData_danglingFlow_get, _infomap.NodeData_danglingFlow_set)
    __swig_setmethods__["indexCodelength"] = _infomap.NodeData_indexCodelength_set
    __swig_getmethods__["indexCodelength"] = _infomap.NodeData_indexCodelength_get
    if _newclass:indexCodelength = _swig_property(_infomap.NodeData_indexCodelength_get, _infomap.NodeData_indexCodelength_set)
    __swig_setmethods__["moduleCodelength"] = _infomap.NodeData_moduleCodelength_set
    __swig_getmethods__["moduleCodelength"] = _infomap.NodeData_moduleCodelength_get
    if _newclass:moduleCodelength = _swig_property(_infomap.NodeData_moduleCodelength_get, _infomap.NodeData_moduleCodelength_set)
    __swig_setmethods__["name"] = _infomap.NodeData_name_set
    __swig_getmethods__["name"] = _infomap.NodeData_name_get
    if _newclass:name = _swig_property(_infomap.NodeData_name_get, _infomap.NodeData_name_set)
    __swig_destroy__ = _infomap.delete_NodeData
    __del__ = lambda self : None;
NodeData_swigregister = _infomap.NodeData_swigregister
NodeData_swigregister(NodeData)

class ChildEdge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChildEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChildEdge, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _infomap.new_ChildEdge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["source"] = _infomap.ChildEdge_source_set
    __swig_getmethods__["source"] = _infomap.ChildEdge_source_get
    if _newclass:source = _swig_property(_infomap.ChildEdge_source_get, _infomap.ChildEdge_source_set)
    __swig_setmethods__["target"] = _infomap.ChildEdge_target_set
    __swig_getmethods__["target"] = _infomap.ChildEdge_target_get
    if _newclass:target = _swig_property(_infomap.ChildEdge_target_get, _infomap.ChildEdge_target_set)
    __swig_setmethods__["flow"] = _infomap.ChildEdge_flow_set
    __swig_getmethods__["flow"] = _infomap.ChildEdge_flow_get
    if _newclass:flow = _swig_property(_infomap.ChildEdge_flow_get, _infomap.ChildEdge_flow_set)
    __swig_destroy__ = _infomap.delete_ChildEdge
    __del__ = lambda self : None;
ChildEdge_swigregister = _infomap.ChildEdge_swigregister
ChildEdge_swigregister(ChildEdge)

class EdgeComp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeComp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeComp, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _infomap.EdgeComp___call__(self, *args)
    def __init__(self): 
        this = _infomap.new_EdgeComp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _infomap.delete_EdgeComp
    __del__ = lambda self : None;
EdgeComp_swigregister = _infomap.EdgeComp_swigregister
EdgeComp_swigregister(EdgeComp)

class SNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _infomap.new_SNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _infomap.delete_SNode
    __del__ = lambda self : None;
    def childDegree(self): return _infomap.SNode_childDegree(self)
    def clear(self): return _infomap.SNode_clear(self)
    def addChild(self, *args): return _infomap.SNode_addChild(self, *args)
    def numSerializableChildEdges(self): return _infomap.SNode_numSerializableChildEdges(self)
    __swig_setmethods__["data"] = _infomap.SNode_data_set
    __swig_getmethods__["data"] = _infomap.SNode_data_get
    if _newclass:data = _swig_property(_infomap.SNode_data_get, _infomap.SNode_data_set)
    __swig_setmethods__["depth"] = _infomap.SNode_depth_set
    __swig_getmethods__["depth"] = _infomap.SNode_depth_get
    if _newclass:depth = _swig_property(_infomap.SNode_depth_get, _infomap.SNode_depth_set)
    __swig_setmethods__["depthBelow"] = _infomap.SNode_depthBelow_set
    __swig_getmethods__["depthBelow"] = _infomap.SNode_depthBelow_get
    if _newclass:depthBelow = _swig_property(_infomap.SNode_depthBelow_get, _infomap.SNode_depthBelow_set)
    __swig_setmethods__["parentNode"] = _infomap.SNode_parentNode_set
    __swig_getmethods__["parentNode"] = _infomap.SNode_parentNode_get
    if _newclass:parentNode = _swig_property(_infomap.SNode_parentNode_get, _infomap.SNode_parentNode_set)
    __swig_setmethods__["parentIndex"] = _infomap.SNode_parentIndex_set
    __swig_getmethods__["parentIndex"] = _infomap.SNode_parentIndex_get
    if _newclass:parentIndex = _swig_property(_infomap.SNode_parentIndex_get, _infomap.SNode_parentIndex_set)
    __swig_setmethods__["isLeaf"] = _infomap.SNode_isLeaf_set
    __swig_getmethods__["isLeaf"] = _infomap.SNode_isLeaf_get
    if _newclass:isLeaf = _swig_property(_infomap.SNode_isLeaf_get, _infomap.SNode_isLeaf_set)
    __swig_setmethods__["originalLeafIndex"] = _infomap.SNode_originalLeafIndex_set
    __swig_getmethods__["originalLeafIndex"] = _infomap.SNode_originalLeafIndex_get
    if _newclass:originalLeafIndex = _swig_property(_infomap.SNode_originalLeafIndex_get, _infomap.SNode_originalLeafIndex_set)
    __swig_setmethods__["id"] = _infomap.SNode_id_set
    __swig_getmethods__["id"] = _infomap.SNode_id_get
    if _newclass:id = _swig_property(_infomap.SNode_id_get, _infomap.SNode_id_set)
    __swig_setmethods__["children"] = _infomap.SNode_children_set
    __swig_getmethods__["children"] = _infomap.SNode_children_get
    if _newclass:children = _swig_property(_infomap.SNode_children_get, _infomap.SNode_children_set)
    __swig_setmethods__["childEdges"] = _infomap.SNode_childEdges_set
    __swig_getmethods__["childEdges"] = _infomap.SNode_childEdges_get
    if _newclass:childEdges = _swig_property(_infomap.SNode_childEdges_get, _infomap.SNode_childEdges_set)
    def serializationSize(self, *args): return _infomap.SNode_serializationSize(self, *args)
    def serialize(self, *args): return _infomap.SNode_serialize(self, *args)
    def deserialize(self, *args): return _infomap.SNode_deserialize(self, *args)
    def deserializeEdges(self, *args): return _infomap.SNode_deserializeEdges(self, *args)
    def lastChild(self): return _infomap.SNode_lastChild(self)
    def firstChild(self): return _infomap.SNode_firstChild(self)
    def nextSibling(self): return _infomap.SNode_nextSibling(self)
    def createChildEdge(self, *args): return _infomap.SNode_createChildEdge(self, *args)
SNode_swigregister = _infomap.SNode_swigregister
SNode_swigregister(SNode)

class LeafIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LeafIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LeafIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _infomap.new_LeafIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def base(self): return _infomap.LeafIterator_base(self)
    def isEnd(self): return _infomap.LeafIterator_isEnd(self)
    def __ref__(self): return _infomap.LeafIterator___ref__(self)
    def __deref__(self): return _infomap.LeafIterator___deref__(self)
    def stepForward(self): return _infomap.LeafIterator_stepForward(self)
    def depth(self): return _infomap.LeafIterator_depth(self)
    def __eq__(self, *args): return _infomap.LeafIterator___eq__(self, *args)
    def __ne__(self, *args): return _infomap.LeafIterator___ne__(self, *args)
    def __iter__(self):
    	self._firstYielded = False
    	return self

    def next(self):
    	if not self._firstYielded:
    		self._firstYielded = True
    	else:
    		self.stepForward()

    	if self.isEnd():
    		raise StopIteration

    	return self

    __swig_destroy__ = _infomap.delete_LeafIterator
    __del__ = lambda self : None;
    def childDegree(self): return _infomap.LeafIterator_childDegree(self)
    def clear(self): return _infomap.LeafIterator_clear(self)
    def addChild(self, *args): return _infomap.LeafIterator_addChild(self, *args)
    def numSerializableChildEdges(self): return _infomap.LeafIterator_numSerializableChildEdges(self)
    __swig_setmethods__["data"] = _infomap.LeafIterator_data_set
    __swig_getmethods__["data"] = _infomap.LeafIterator_data_get
    if _newclass:data = _swig_property(_infomap.LeafIterator_data_get, _infomap.LeafIterator_data_set)
    __swig_setmethods__["depthBelow"] = _infomap.LeafIterator_depthBelow_set
    __swig_getmethods__["depthBelow"] = _infomap.LeafIterator_depthBelow_get
    if _newclass:depthBelow = _swig_property(_infomap.LeafIterator_depthBelow_get, _infomap.LeafIterator_depthBelow_set)
    __swig_setmethods__["parentNode"] = _infomap.LeafIterator_parentNode_set
    __swig_getmethods__["parentNode"] = _infomap.LeafIterator_parentNode_get
    if _newclass:parentNode = _swig_property(_infomap.LeafIterator_parentNode_get, _infomap.LeafIterator_parentNode_set)
    __swig_setmethods__["parentIndex"] = _infomap.LeafIterator_parentIndex_set
    __swig_getmethods__["parentIndex"] = _infomap.LeafIterator_parentIndex_get
    if _newclass:parentIndex = _swig_property(_infomap.LeafIterator_parentIndex_get, _infomap.LeafIterator_parentIndex_set)
    __swig_setmethods__["isLeaf"] = _infomap.LeafIterator_isLeaf_set
    __swig_getmethods__["isLeaf"] = _infomap.LeafIterator_isLeaf_get
    if _newclass:isLeaf = _swig_property(_infomap.LeafIterator_isLeaf_get, _infomap.LeafIterator_isLeaf_set)
    __swig_setmethods__["originalLeafIndex"] = _infomap.LeafIterator_originalLeafIndex_set
    __swig_getmethods__["originalLeafIndex"] = _infomap.LeafIterator_originalLeafIndex_get
    if _newclass:originalLeafIndex = _swig_property(_infomap.LeafIterator_originalLeafIndex_get, _infomap.LeafIterator_originalLeafIndex_set)
    __swig_setmethods__["id"] = _infomap.LeafIterator_id_set
    __swig_getmethods__["id"] = _infomap.LeafIterator_id_get
    if _newclass:id = _swig_property(_infomap.LeafIterator_id_get, _infomap.LeafIterator_id_set)
    __swig_setmethods__["children"] = _infomap.LeafIterator_children_set
    __swig_getmethods__["children"] = _infomap.LeafIterator_children_get
    if _newclass:children = _swig_property(_infomap.LeafIterator_children_get, _infomap.LeafIterator_children_set)
    __swig_setmethods__["childEdges"] = _infomap.LeafIterator_childEdges_set
    __swig_getmethods__["childEdges"] = _infomap.LeafIterator_childEdges_get
    if _newclass:childEdges = _swig_property(_infomap.LeafIterator_childEdges_get, _infomap.LeafIterator_childEdges_set)
    def serializationSize(self, *args): return _infomap.LeafIterator_serializationSize(self, *args)
    def serialize(self, *args): return _infomap.LeafIterator_serialize(self, *args)
    def deserialize(self, *args): return _infomap.LeafIterator_deserialize(self, *args)
    def deserializeEdges(self, *args): return _infomap.LeafIterator_deserializeEdges(self, *args)
    def lastChild(self): return _infomap.LeafIterator_lastChild(self)
    def firstChild(self): return _infomap.LeafIterator_firstChild(self)
    def nextSibling(self): return _infomap.LeafIterator_nextSibling(self)
    def createChildEdge(self, *args): return _infomap.LeafIterator_createChildEdge(self, *args)
LeafIterator_swigregister = _infomap.LeafIterator_swigregister
LeafIterator_swigregister(LeafIterator)

class HierarchicalNetwork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HierarchicalNetwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HierarchicalNetwork, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _infomap.new_HierarchicalNetwork(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _infomap.delete_HierarchicalNetwork
    __del__ = lambda self : None;
    def init(self, *args): return _infomap.HierarchicalNetwork_init(self, *args)
    def clear(self): return _infomap.HierarchicalNetwork_clear(self)
    def getRootNode(self): return _infomap.HierarchicalNetwork_getRootNode(self)
    def numTopModules(self): return _infomap.HierarchicalNetwork_numTopModules(self)
    def leafIter(self): return _infomap.HierarchicalNetwork_leafIter(self)
    def addNode(self, *args): return _infomap.HierarchicalNetwork_addNode(self, *args)
    def addLeafNode(self, *args): return _infomap.HierarchicalNetwork_addLeafNode(self, *args)
    def prepareAddLeafNodes(self, *args): return _infomap.HierarchicalNetwork_prepareAddLeafNodes(self, *args)
    def addLeafEdge(self, *args): return _infomap.HierarchicalNetwork_addLeafEdge(self, *args)
    def propagateNodeNameUpInHierarchy(self, *args): return _infomap.HierarchicalNetwork_propagateNodeNameUpInHierarchy(self, *args)
    def writeStreamableTree(self, *args): return _infomap.HierarchicalNetwork_writeStreamableTree(self, *args)
    def readStreamableTree(self, *args): return _infomap.HierarchicalNetwork_readStreamableTree(self, *args)
    def writeHumanReadableTree(self, *args): return _infomap.HierarchicalNetwork_writeHumanReadableTree(self, *args)
    def readHumanReadableTree(self, *args): return _infomap.HierarchicalNetwork_readHumanReadableTree(self, *args)
    def writeMap(self, *args): return _infomap.HierarchicalNetwork_writeMap(self, *args)
    def numLeafNodes(self): return _infomap.HierarchicalNetwork_numLeafNodes(self)
    def numLeafEdges(self): return _infomap.HierarchicalNetwork_numLeafEdges(self)
    def numNodesInTree(self): return _infomap.HierarchicalNetwork_numNodesInTree(self)
    def maxDepth(self): return _infomap.HierarchicalNetwork_maxDepth(self)
    def codelength(self): return _infomap.HierarchicalNetwork_codelength(self)
    def onelevelCodelength(self): return _infomap.HierarchicalNetwork_onelevelCodelength(self)
HierarchicalNetwork_swigregister = _infomap.HierarchicalNetwork_swigregister
HierarchicalNetwork_swigregister(HierarchicalNetwork)

# This file is compatible with both classic and new-style classes.


